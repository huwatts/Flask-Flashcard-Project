$(function() {
    const flash_class = $('.flash_card');

    // an array to keep track of flipped cards:
    const flipped = [];

    // cards_to_render stores the list of cards to be rendered on the page
    let cards_to_render = [];
    // all_cards stores all cards for the current user, and is generated by "fetch_request()"
    // this variables keeps track of the "toggle priority" button and is set to 0 by default.
    let important = 0;
    let category = "all"

    // fetch request upon intial page load
    let inital_entry = {
        "category": "all",
        "delete": ".",
        "imp_id" : "."
    }
    fetch_request(inital_entry)

    // event listener for the "important" checkbox
    $('#slider').on('change', function() {
        if ($(this).prop('checked')) {
            important = 1;
        } else {
            important = 0;
        };
        filter_cards();
        });
 
    // Event listener for change of category:
    $('select[name="category"]').on('change', function() {
        category = $(this).val();
        // exception for when "all" cards requested:
        filter_cards();
    });

    // event listeners for flash card flip:
    flash_class.each(function(i) {
        $(this).on('click', function() {
            if (flipped[i]) {
                $(this).html(cards_to_render[i].question);
                $(this).css("background-color","#7494b8");
                flipped[i] = false;
                $('.flash_card').css('border-style', 'none');
                $(this).css('border-style', 'solid');
                selected = $(this);
            } else {
                $(this).html(cards_to_render[i].answer);
                $(this).css("background-color",'#aaa986');
                flipped[i] = true;
                $('.flash_card').css('border-style', 'none');
                $(this).css('border-style', 'solid');
                selected = $(this);
            }
        })
    })

    // sql database id of clicked card:
    let clicked_id
    // cards_to_render[i] of clicked card:
    let i_clicked
    // event listeners to allow cards to be deleted
    // or marked as important:
    for (let i = 0; i < flash_class.length; i++) {
        let div = $(`#flash-${i}`);
        div.on('click', function(event) {
            clicked_id = cards_to_render[i].id;
            i_clicked = i;
        });
      }

    let turn_off_animations = false
    // add event listener to the delete button
    $("#delete_card").on('click', function(event) {
        event.preventDefault();
        if (clicked_id) {
            // modify local copies of cards:
            all_cards.splice(i_clicked, 1);
            cards_to_render.splice(i_clicked, 1);
            // render modifications for user:
            turn_off_animations = true;
            render_cards()
            // inform back-end of modifications:
            entry = {
                "category": $('select[name="category"]').val(),
                "delete": clicked_id,
                "imp_id" : "."
            }
            // update_needed = false:
            fetch_request(entry, false);
        }
    });

    // add event listener to the "Toggle priority" button
    $("#imp").on('click', function(event) {
        event.preventDefault();
        if (clicked_id) {
            // modify local copies of cards:
            const hasCorrectId = (element) => element.id == clicked_id;
            let index = all_cards.findIndex(hasCorrectId);
            if (all_cards[index].important == 0) {
                all_cards[index].important = 1;
            } else {
                all_cards[index].important = 0;
            };
            // stop rendering the card with changed priority:
            cards_to_render.splice(i_clicked, 1);
            // render modifications for user:
            turn_off_animations = true;
            render_cards()
            // inform back-end of modifications:
            entry = {
                "category": $('select[name="category"]').val(),
                "delete": ".",
                "imp_id" : clicked_id
            }
            // update_needed = false:
            fetch_request(entry, false);
        }
    });

    function fetch_request(entry, update_needed=true) {
        // send the ajax request:
        fetch(`${window.origin}/flash_c`, {
            method: "POST",
            credentials: "include",
            body: JSON.stringify(entry),
            cache: "no-cache",
            headers: new Headers({
                "content-type": "application/json"
            })
        })
        .then (function (response){
            // check for any request errors:
            if (response.status !== 200) {
                console.log("Response error: " + `${response.status}`);
                return;
            } else {
                response.json().then(function (data) {
                    if (update_needed) {
                        all_cards = data;
                        cards_to_render = all_cards;
                        console.log(cards_to_render);
                        render_cards();
                    } else if (data.success != true) {
                        console.log("Back-end failed to update modifications")
                    };
                })
            }
        })
    };

    // This function allows all_cards to be fitlered as per the user's request
    function filter_cards() {
        // clear cards_to_render
        cards_to_render = []
        // use for loop to check category and append to updated filtered list "cards_to_render"
        if (category == "all") {
            for (let i = 0; i < all_cards.length; i++) {
                if (all_cards[i].important == important) {
                    cards_to_render.push(all_cards[i]);
                }}
        } else {
            for (let i = 0; i < all_cards.length; i++) {
                if ((all_cards[i].category == category) && (all_cards[i].important == important)) {
                    cards_to_render.push(all_cards[i]);
                }
            }
        }
        render_cards()        
    }

    function render_cards() {
        // reset flips to track background color:
        for (let i = 0; i < cards_to_render.length; i++) {
            flipped.push(false);
            }
        // hide and show entire flash card according to number of entries available:
        if (turn_off_animations) {
            // skip the animations if it is a delete request
            flash_class.each(function(i) {
                // if card exists:
                if (cards_to_render[i]){
                    $(this).show();
                // else hide the element:
                } else {
                    $(this).hide();
                }
                // turn animations back on for next time:
                turn_off_animations = false
            })
        } else {
            // add animation if not a delete request
            flash_class.each(function(i) {
                // if card exists:
                if (cards_to_render[i]){
                    $(this).show(200);
                // else hide the element:
                } else {
                    $(this).hide(200);
                }
        })};
        // reset the flipped array:
        flipped.fill(false);
        // fill flash_class with new cards:
        flash_class.each(function(i) {
            if (cards_to_render[i]){
                $(this).html(cards_to_render[i].question);
                $(this).css("background-color","#7494b8");
            }
        });
}

});