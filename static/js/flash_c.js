"use strict";
$(function() {
    const flash_class = $('.flash_card');
    const front_class = $('.face--front');
    const back_class = $('.face--back');

    // an array to keep track of flipped cards:
    let flipped = [];
    // an array to keep track of 
        // - the sql database id
        // - the indices of the flipped cards: all_cards[i]

    
    // cards_to_render stores the list of cards to be rendered on the page
    let all_cards = [];
    let cards_to_render = [];
    // all_cards stores all cards for the current user, and is generated by "fetch_request()"
    // this variables keeps track of the "toggle priority" button and is set to 0 by default.
    let important = 0;
    let category = "all"

    // fetch request upon intial page load
    let inital_entry = {
        "category": "all",
        "delete": ".",
        "imp_id" : "."
    }
    fetch_request(inital_entry)

    // event listener for the "important" checkbox
    $('#slider').on('change', function() {
        if ($(this).prop('checked')) {
            important = 1;
        } else {
            important = 0;
        };
        filter_cards(200);
        });
 
    // Event listener for change of category:
    $('select[name="category"]').on('change', function() {
        category = $(this).val();
        filter_cards(200);
    });

    // event listeners for 'flipped' array:
    flash_class.each(function(i) {
        $(this).on('click', function() {
            if (flipped[i]) {
                flipped[i] = false;
            } else {
                flipped[i] = true;
            }
        })
    })

    // sql database id of clicked card:
    let clicked_id
    // cards_to_render[i] of clicked card:
    let i_clicked

    // add event listener to the delete button
    $("#delete_card").on('click', function(event) {
        event.preventDefault();
        // find the id of selected cards from the flipped array:
        let selected = convert_flipped_array_to_ids();
        let entry
        let to_be_deleted = [];
        // for each flipped flashcard, delete it:
        for (let i = 0; i < selected.length; i++) {
            // queue card for deletion:
            to_be_deleted.push(selected[i][2])
            
            // inform back-end of modifications:
            entry = {
                "category": $('select[name="category"]').val(),
                "delete": selected[i][0],
                "imp_id" : "."
            }
            // update_needed = false:
            
            fetch_request(entry, false);
        }
        // excute the queue of cards to be deleted:

        // ensure that elements at greater indicies are deleted first:
        to_be_deleted.sort(function(a,b){ return b - a; });
        to_be_deleted.forEach(function(index) {
            all_cards.splice(index, 1);
        })
        
        // render modifications for user:
        filter_cards(0);
    });

    // add event listener to the "Toggle priority" button
    // This includes:
    // - an update to the local card dictionaries
    // - an update to the database on the server
    $("#imp").on('click', function(event) {
        event.preventDefault();
        let selected = convert_flipped_array_to_ids();
        let entry

            for (let i=0; i < selected.length; i++) {
            // modify local copies of cards:

            // change the dictionary at the index to have the importance toggled:
            if (all_cards[selected[i][2]].important == 0) {
                all_cards[selected[i][2]].important = 1;
            } else {
                all_cards[selected[i][2]].important = 0;
            };
            // inform back-end of modifications:
            entry = {
                "category": $('select[name="category"]').val(),
                "delete": ".",
                "imp_id" : selected[i][0]
            }
        }
        filter_cards(0);
        // update_needed = false:
        fetch_request(entry, false);
            
    });

    function fetch_request(entry, update_needed=true) {
        // send the request to the backend:
        fetch(`${window.origin}/flash_c`, {
            method: "POST",
            credentials: "include",
            body: JSON.stringify(entry),
            cache: "no-cache",
            headers: new Headers({
                "content-type": "application/json"
            })
        })
        .then (function (response){
            // check for any request errors:
            if (response.status !== 200) {
                console.log("Response error: " + `${response.status}`);
                return;
            } else {
                response.json().then(function (data) {
                    if (update_needed) {
                        // update all_cards with the most recent clone from server-side
                        all_cards = data;
                        // reset all data in the meta-data arrays:
                        filter_cards(300);
                    } else if (data.success != true) {
                        console.log("Back-end failed to update modifications")
                    };
                })
            }
        })
    };

    // This function allows all_cards to be fitlered as per the user's request
    function filter_cards(animation_time=0) {
        // clear cards_to_render
        cards_to_render = []
        // use for loop to check category and append to updated filtered list "cards_to_render"
        if (category == "all") {
            for (let i = 0; i < all_cards.length; i++) {
                if (all_cards[i].important == important) {
                    cards_to_render.push(all_cards[i]);
                }}
        } else {
            for (let i = 0; i < all_cards.length; i++) {
                if ((all_cards[i].category == category) && (all_cards[i].important == important)) {
                    cards_to_render.push(all_cards[i]);
                }
            }
        }
        render_cards(animation_time)        
    }

    function render_cards(animation_time) {
           
        reset_flips();

        // console.log(cards_to_render);

        // fill front_class with new questions:
        front_class.each(function(i) {
            if (cards_to_render[i]){
                $(this).html(cards_to_render[i].question);
            }
        });
        // fill back_class with answers:
        back_class.each(function(i) {
            if (cards_to_render[i]){
                $(this).html(cards_to_render[i].answer)
            }
        });
        render_class(flash_class, animation_time);
        render_class(front_class, animation_time);
        render_class(back_class, animation_time);
    }  

    function render_class(div_class, animation_time) {
        div_class.each(function(i) {
            // if card exists:
            if (cards_to_render[i]){
                $(this).show(animation_time);
            // else hide the element:
            } else {
                $(this).hide(animation_time);
            }
    });
    }
    // apply the 'flipped' class to each flashcard upon click.
    // the 'flipped' class applies the flip along the y axis for the respective css card.
    flash_class.each(function(i){
        $(this).on('click', function() {
            this.classList.toggle('flipped');
        });
    });

     
    function reset_flips() {
        // reset the css-flip styles
        flash_class.each(function(i){
            if (flipped[i]) {
                this.classList.toggle('flipped');
            }
        });
        // reset the flipped and selected arrays
        flipped = [];
        // assign variable to speed up both for loops 
        let cards_to_render_length = cards_to_render.length
        for (let i = 0; i < cards_to_render_length; i++) {
            flipped.push(false)
        }
        /* create event listeners, now that the number of flashcard elements is known:
        flash_class.each(function(i){
            if (i < cards_to_render_length) {
                $(this).on('click', function() {
                    clicked_id = cards_to_render[i].id;
                    i_clicked = i;
                });
            }
            
        });  */
    }


    // This functions takes the flipped array.
    // and returns the metadata about the flipped flashcards
    // needed to execute deletion and priority change requests.
    function convert_flipped_array_to_ids() {
        let selected = [];
        for (let i=0; i < cards_to_render.length; i++) {
            if (flipped[i]) {
                let sql_db_id = cards_to_render[i].id;
                function hasCorrectId(element) {
                    return element.id == sql_db_id;
                }
                let all_cards_index = all_cards.findIndex(hasCorrectId);
                selected.push([sql_db_id, i, all_cards_index]);
            }
        }
        return selected;
    }

});